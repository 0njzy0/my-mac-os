<?xml version="1.0"?>
<root>


<!-- can use constant 'British' when I want to use items specific only to british keyboard -->
<inputsourcedef>
<name>British</name>
<inputsourceid_prefix>com.apple.keylayout.British</inputsourceid_prefi>
</inputsourcedef>


<!-- paths to files, creates constants I can use -->
<vkopenurldef>
<name>KeyCode::VK_OPEN_URL_APP_Sublime Text</name>
<url type="file">/Applications/Sublime Text.app</url>
</vkopenurldef>

<vkopenurldef>
<name>KeyCode::VK_OPEN_URL_APP_MindNode</name>
<url type="file">/Applications/MindNode.app</url>
</vkopenurldef>

<vkopenurldef>
<name>KeyCode::VK_OPEN_URL_APP_1Password</name>
<url type="file">/Applications/1Password.app</url>
</vkopenurldef>



<!-- a big life changer -->
<!-- makes  caps lock act as a combination of ⌥⌃ keys when pressed together with something, and acts as ⎋ key when pressed alone-->
<!-- allows for caps lock + the entire keyboard of bindings that you can then use + the esc key is invaluable -->
<!-- my caps lock + keys bindings are global hotkeys and not app specific -->
<item>
<name>F19 to F19</name>
<appendix>(F19 to Hyper (ctrl+opt) + F19 Only, send escape)
</appendix>
<identifier>private.f192f19_escape</identifier>
<autogen>
--KeyOverlaidModifier--
KeyCode::F19,
KeyCode::OPTION_L,
ModifierFlag::CONTROL_L,
KeyCode::ESCAPE
</autogen>
</item> 


<!-- open applications with karabiner physical key presses -->
<item>
<name>caps + top delete to open magic number</name>
<identifier>private.caps_to_delete_to_calculator</identifier>
<autogen>
__KeyToKey__
KeyCode::DELETE, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L,
KeyCode::U, ModifierFlag::CONTROL_L, ModifierFlag::COMMAND_L,
</autogen>
</item>

<item>
<name>right option key + delete to MindNode</name>
<identifier>private.right_opt_plus_delete_to_mindnode</identifier>
<autogen>
__KeyToKey__
KeyCode::DELETE, ModifierFlag::CONTROL_L,
KeyCode::VK_OPEN_URL_APP_MindNode,
</autogen>
</item>

<item>
<name>right option key + right shift to Sublime Text</name>
<identifier>private.right_opt_plus_shift_to_sublime</identifier>
<autogen>
__KeyToKey__
KeyCode::SHIFT_R, ModifierFlag::CONTROL_L,
KeyCode::VK_OPEN_URL_APP_Sublime Text,
</autogen>
</item>


<!-- another big life changer -->
<!-- allows me to use right shift as a normal delete button when pressed alone -->
<!-- when pressed together makes command + shift combination which allows me to use varous neat bindings -->
<!-- I personally use right shift + bindings as app specific bindings unlike my caps bindings which are global -->
<item>
<name>right shift to command and shift when together, delete when alone</name>
<identifier>private.right_shift_to_command_and_shift</identifier>
<autogen>
--KeyOverlaidModifier--
KeyCode::SHIFT_R,
KeyCode::SHIFT_L,
ModifierFlag::COMMAND_L,
KeyCode::DELETE
</autogen>
</item>

<!-- I use Alfred everyday as a replacement for spotlight -->
<!-- this allows me to toggle Alfred prompt with one right command key press -->
<!-- I then bind this combination in Alfred itself and I have a fully working command key which acts as Alfred prompt when pressed alone -->
<item>
<name>Right Command to Alfred</name>
<identifier>private.right_command_to_alfred</identifier>
<autogen>
__KeyOverlaidModifier__
KeyCode::COMMAND_R,
KeyCode::COMMAND_R,
KeyCode::SPACE, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L, ModifierFlag::SHIFT_L
</autogen>
</item>


<!-- I use round brackets more often then square brackets -->
<!-- I also use colon more often then semi colon -->
<!-- this is just a personal preference of me changing brackets around to make my typing workflow much faster -->
<!-- I might add and change things later but right now this is really nice -->
<item>
<name>Put {} () [] to a better place</name>	
<identifier>private.brackets_around</identifier>
<inputsource_only>British</inputsource_only>
<autogen>
__KeyToKey__
KeyCode::BACKSLASH, ModifierFlag::NONE,
KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_L,
</autogen>
<autogen>
__KeyToKey__
KeyCode::BACKSLASH, ModifierFlag::SHIFT_L,
KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L
</autogen>	
<autogen>
__KeyToKey__
KeyCode::BRACKET_LEFT, ModifierFlag::NONE,
KeyCode::9, ModifierFlag::SHIFT_L	
</autogen>	
<autogen>
__KeyToKey__
KeyCode::BRACKET_RIGHT, ModifierFlag::NONE,
KeyCode::0, ModifierFlag::SHIFT_L	
</autogen>
<autogen>
__KeyToKey__
KeyCode::BRACKET_LEFT, ModifierFlag::SHIFT_L,
KeyCode::BRACKET_LEFT, ModifierFlag::NONE	
</autogen>
<autogen>
__KeyToKey__
KeyCode::BRACKET_RIGHT, ModifierFlag::SHIFT_L,
KeyCode::BRACKET_RIGHT, ModifierFlag::NONE	
</autogen>
<autogen>
__KeyToKey__
KeyCode::MINUS, ModifierFlag::SHIFT_L,
KeyCode::BACKSLASH, ModifierFlag::NONE	
</autogen>	
<autogen>
__KeyToKey__
KeyCode::0, ModifierFlag::SHIFT_L,
KeyCode::BACKSLASH, ModifierFlag::SHIFT_L	
</autogen>	
<autogen>
__KeyToKey__
KeyCode::9, ModifierFlag::SHIFT_L,
KeyCode::BACKQUOTE, ModifierFlag::NONE	
</autogen>	
</item>

<item>
<name>Change Colon to SemiColon</name>	
<identifier>private.colon_to_semicolon</identifier>
<inputsource_only>British</inputsource_only>
<autogen>
__KeyToKey__
KeyCode::SEMICOLON, ModifierFlag::SHIFT_L,
KeyCode::SEMICOLON
</autogen>	
</item>

<item>
<name>Change SemiColon to Colon</name>	
<identifier>private.semicolon_to_colon</identifier>
<inputsource_only>British</inputsource_only>
<autogen>
__KeyToKey__
KeyCode::SEMICOLON,
KeyCode::SEMICOLON, ModifierFlag::SHIFT_L
</autogen>	
</item>


<!-- I haven't found any use for my fn key on os x so I decided to make it useful -->
<!-- this makes my fn key act as a 'superkey' ie all modifiers pressed together (alt, opt, command, shift) -->
<!-- this allows for insane freedom in keybindings -->
<!-- I also have fn + shift binding to a combination, I use it to lookup highlighted text in the dictionary -->
<item>
<name>fn shift to combination plus fn superkey</name>
<identifier>private.fn_shift_to_combination</identifier>
<autogen>
__KeyOverlaidModifier__
KeyCode::SHIFT_L, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L,
KeyCode::SHIFT_L, ModifierFlag::FN,
KeyCode::X, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L, ModifierFlag::SHIFT_L
</autogen>
<autogen>
__KeyOverlaidModifier__
KeyCode::SHIFT_L, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L,
KeyCode::F19, ModifierFlag::FN,
KeyCode::Z, ModifierFlag::CONTROL_L, ModifierFlag::OPTION_L, ModifierFlag::COMMAND_L, ModifierFlag::SHIFT_L
</autogen>
<autogen>
__KeyToKey__
KeyCode::FN,
KeyCode::COMMAND_L, ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L, ModifierFlag::SHIFT_L,
</autogen>
</item>

</root>
